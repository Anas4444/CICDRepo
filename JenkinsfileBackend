pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        jdk "jdk17"
        maven "maven3"
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus:8081"
        NEXUS_REPOSITORY = "backend-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
        ARTIFACT_VERSION = "0.0.1-SNAPSHOT"
        ARTIFACT_TYPE = "jar"
        ARTIFACT_ID = "blog"
        GROUP_ID = "com.jcibardo.blog"
    }

    stages {
        stage('git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Anas4444/backend.git'
            }
        }

        stage('Code Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('SONARQUBE-ANALYSIS') {
            steps() {
                withSonarQubeEnv('sonarqube-server') {
                    //sh "mvn sonar:sonar"
                    sh '${SCANNER_HOME}/bin/sonar-scanner --version'
                }
            }
        }

        stage('Build') {
            steps() {
                sh "mvn clean package -DskipTests=true"
                archiveArtifacts artifacts: 'target/*.jar', onlyIfSuccessful: true
            }
        }

        stage('Publish to Nexus') {
            steps() {
                nexusArtifactUploader(
                    nexusVersion: NEXUS_VERSION,
                    protocol: NEXUS_PROTOCOL,
                    nexusUrl: NEXUS_URL,
                    groupId: GROUP_ID,
                    version: ARTIFACT_VERSION,
                    repository: NEXUS_REPOSITORY,
                    credentialsId: NEXUS_CREDENTIAL_ID,
                    artifacts: [
                        [artifactId: ARTIFACT_ID,
                        classifier: '',
                        file: "target/${ARTIFACT_ID}-${ARTIFACT_VERSION}.${ARTIFACT_TYPE}",
                        type: ARTIFACT_VERSION],
                        [artifactId: ARTIFACT_ID,
                        classifier: '',
                        file: "pom.xml",
                        type: "pom"]
                    ]
                )
            }
        }
    }
}
